@{
    ViewData["Title"] = "View Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<main class="container mt-5 pt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-primary-custom fw-bold">View Products</h1>
        <a asp-controller="Products" asp-action="Create" class="btn btn-success">
            <i class="bi bi-plus-circle me-1"></i> Add New Product
        </a>
    </div>

    <p class="text-center text-muted">Browse through your current product inventory with edit/delete options.</p>

    <div class="table-responsive bg-white rounded shadow p-4 mt-4">
        <table class="table table-striped table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Product ID</th>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price ($)</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="productTableBody"></tbody>
        </table>
    </div>

    <div class="text-center mt-4">
        <a href="/Manage" class="btn btn-secondary">Back to Manage Menu</a>
    </div>
</main>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editProductId" />
                <input type="hidden" id="editProductSource" />
                <div class="mb-3">
                    <label for="editName" class="form-label">Name</label>
                    <input type="text" class="form-control" id="editName" />
                </div>
                <div class="mb-3">
                    <label for="editCategory" class="form-label">Category</label>
                    <input type="text" class="form-control" id="editCategory" />
                </div>
                <div class="mb-3">
                    <label for="editPrice" class="form-label">Price</label>
                    <input type="number" class="form-control" id="editPrice" />
                </div>
                <div class="mb-3">
                    <label for="editStock" class="form-label">Stock</label>
                    <input type="number" class="form-control" id="editStock" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveChangesBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentProducts = [];

        async function loadProducts() {
            const apiProducts = await fetch("https://fakestoreapi.com/products").then(res => res.json());
            const localProducts = JSON.parse(localStorage.getItem("products")) || [];

            currentProducts = [
                ...apiProducts.map(p => ({
                    id: p.id,
                    name: p.title,
                    category: p.category,
                    price: p.price,
                    stock: p.rating?.count || 0,
                    source: "api"
                })),
                ...localProducts.map(p => ({
                    ...p,
                    source: "local"
                }))
            ];

            const tableBody = document.getElementById("productTableBody");
            tableBody.innerHTML = "";

            currentProducts.forEach(p => {
                tableBody.innerHTML += `
                    <tr>
                        <td>${p.id}</td>
                        <td>${p.name}</td>
                        <td>${p.category}</td>
                        <td>${p.price}</td>
                        <td>${p.stock}</td>
                        <td>
                            <button class="btn btn-warning btn-sm edit-btn" data-id="${p.id}" data-source="${p.source}">Edit</button>
                            <button class="btn btn-danger btn-sm delete-btn" data-id="${p.id}" data-source="${p.source}">Delete</button>
                        </td>
                    </tr>`;
            });
        }

        document.addEventListener("click", async function (e) {
            if (e.target.classList.contains("edit-btn")) {
                const id = parseInt(e.target.dataset.id);
                const source = e.target.dataset.source;
                const p = currentProducts.find(x => x.id == id && x.source === source);

                if (p) {
                    document.getElementById("editProductId").value = p.id;
                    document.getElementById("editProductSource").value = p.source;
                    document.getElementById("editName").value = p.name;
                    document.getElementById("editCategory").value = p.category;
                    document.getElementById("editPrice").value = p.price;
                    document.getElementById("editStock").value = p.stock;

                    new bootstrap.Modal(document.getElementById("editModal")).show();
                }
            }

            if (e.target.classList.contains("delete-btn")) {
                const id = parseInt(e.target.dataset.id);
                const source = e.target.dataset.source;

                if (source === "local") {
                    let local = JSON.parse(localStorage.getItem("products")) || [];
                    local = local.filter(p => p.id !== id);
                    localStorage.setItem("products", JSON.stringify(local));
                    alert("Deleted from localStorage.");
                    loadProducts();
                } else {
                    await fetch(`https://fakestoreapi.com/products/${id}`, { method: "DELETE" });
                    alert("Deleted from API.");
                    loadProducts();
                }
            }
        });

        document.getElementById("saveChangesBtn").addEventListener("click", async () => {
            const id = parseInt(document.getElementById("editProductId").value);
            const source = document.getElementById("editProductSource").value;

            const updated = {
                id: id,
                name: document.getElementById("editName").value,
                category: document.getElementById("editCategory").value,
                price: parseFloat(document.getElementById("editPrice").value),
                stock: parseInt(document.getElementById("editStock").value)
            };

            if (source === "local") {
                let local = JSON.parse(localStorage.getItem("products")) || [];
                const index = local.findIndex(p => p.id === id);
                if (index > -1) {
                    local[index] = updated;
                    localStorage.setItem("products", JSON.stringify(local));
                    alert("Updated in localStorage.");
                }
            } else {
                await fetch(`https://fakestoreapi.com/products/${id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        title: updated.name,
                        category: updated.category,
                        price: updated.price,
                        description: "Updated",
                        image: "https://via.placeholder.com/150"
                    })
                });
                alert("Updated via API.");
            }

            bootstrap.Modal.getInstance(document.getElementById("editModal")).hide();
            loadProducts();
        });

        window.onload = loadProducts;
    </script>
}
